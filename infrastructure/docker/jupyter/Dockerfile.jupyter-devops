# DevOps-Focused Jupyter Docker Image
# Optimized for infrastructure management and DevOps automation

FROM jupyter/base-notebook:latest

# Switch to root to install system packages
USER root

# Install system dependencies for DevOps tools
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    unzip \
    jq \
    vim \
    nano \
    htop \
    net-tools \
    telnet \
    dig \
    openssh-client \
    rsync \
    gnupg \
    lsb-release \
    ca-certificates \
    software-properties-common \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Docker CLI
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && apt-get update \
    && apt-get install -y docker-ce-cli \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install kubectl
RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" \
    && chmod +x kubectl \
    && mv kubectl /usr/local/bin/

# Install Helm
RUN curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

# Install Terraform
RUN curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg \
    && echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list \
    && apt-get update \
    && apt-get install -y terraform \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Ansible
RUN pip install --no-cache-dir ansible>=8.0.0

# Install Azure CLI
RUN curl -sL https://aka.ms/InstallAzureCLIDeb | bash

# Install AWS CLI
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
    && unzip awscliv2.zip \
    && ./aws/install \
    && rm -rf awscliv2.zip aws

# Install Google Cloud CLI
RUN curl https://sdk.cloud.google.com | bash

# Switch back to jovyan user
USER $NB_UID

# Install Python DevOps and automation packages
RUN pip install --no-cache-dir \
    # Infrastructure as Code
    pulumi>=3.76.0 \
    pulumi-aws>=6.0.0 \
    pulumi-azure>=5.0.0 \
    pulumi-gcp>=7.0.0 \
    # Configuration management
    pydantic>=2.0.0 \
    pydantic-settings>=2.0.0 \
    pyyaml>=6.0.0 \
    # Monitoring and observability
    prometheus-client>=0.17.0 \
    grafana-api>=1.0.0 \
    # Database operations
    sqlalchemy>=2.0.0 \
    psycopg2-binary>=2.9.0 \
    pymongo>=4.4.0 \
    redis>=4.6.0 \
    # API and web frameworks
    fastapi>=0.100.0 \
    uvicorn>=0.23.0 \
    requests>=2.31.0 \
    httpx>=0.24.0 \
    # Testing frameworks
    pytest>=7.4.0 \
    pytest-asyncio>=0.21.0 \
    pytest-mock>=3.11.0 \
    # Security tools
    bandit>=1.7.0 \
    safety>=2.3.0 \
    # Container orchestration
    kubernetes>=27.2.0 \
    docker>=6.1.0 \
    # CI/CD integration
    gitlab-python>=3.15.0 \
    github3.py>=4.0.0 \
    # Workflow automation
    celery>=5.3.0 \
    croniter>=1.4.0 \
    # Log analysis
    loguru>=0.7.0 \
    # Data processing
    pandas>=2.0.0 \
    matplotlib>=3.7.0 \
    seaborn>=0.12.0 \
    plotly>=5.15.0 \
    # Notebook execution
    papermill>=2.4.0 \
    # Interactive widgets
    ipywidgets>=8.0.0 \
    # Jupyter extensions
    jupyterlab-git>=0.42.0 \
    jupyterlab-lsp>=4.2.0

# Install JupyterLab extensions for DevOps
RUN jupyter labextension install --no-build \
    @jupyter-widgets/jupyterlab-manager \
    @jupyterlab/git \
    jupyterlab-execute-time \
    && jupyter lab build --dev-build=False --minimize=False

# Install additional DevOps tools
RUN pip install --no-cache-dir \
    # Network monitoring
    paramiko>=3.2.0 \
    netmiko>=4.2.0 \
    # Performance monitoring
    psutil>=5.9.0 \
    # Backup and recovery
    boto3>=1.28.0 \
    # Environment management
    python-dotenv>=1.0.0 \
    # Process management
    supervisor>=4.2.0

# Set up DevOps-specific environment variables
ENV PYTHONPATH="/home/jovyan/work:$PYTHONPATH"
ENV KUBECONFIG="/home/jovyan/.kube/config"
ENV JUPYTER_ENABLE_LAB=yes

# Create directories for DevOps workflows
RUN mkdir -p /home/jovyan/work/infrastructure \
    /home/jovyan/work/scripts \
    /home/jovyan/work/configs \
    /home/jovyan/work/monitoring \
    /home/jovyan/.kube \
    /home/jovyan/.aws \
    /home/jovyan/.azure

# Copy DevOps-specific configuration
COPY jupyter_notebook_config.py /home/jovyan/.jupyter/
COPY --chown=$NB_UID:$NB_GID devops_startup.py /home/jovyan/.ipython/profile_default/startup/

# Set working directory
WORKDIR /home/jovyan/work

# Expose Jupyter port
EXPOSE 8888

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8888/api || exit 1

# Start Jupyter Lab
CMD ["start-notebook.sh", "--NotebookApp.token=''", "--NotebookApp.password=''"] 